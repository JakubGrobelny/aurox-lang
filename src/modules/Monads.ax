# Maybe monad

defop >>= 10 left

define maybe_bind m f : Maybe a -> (a -> Maybe b) -> Maybe b =
    match m with
        case Nothing => Nothing
        case Just a => f a
    end
end

define maybe_return a : a -> Maybe a =
    Just a
end

define (>>=) := maybe_bind end

# List monad

import
    List
end

defop >=> 10 left

define list_bind xs f : [a] -> (a -> [b]) -> [b] =
    match xs with
        case [] => []
        case [x | xs] => [f x | flatten $ list_bind xs f]
    end
end

define list_return a : a -> [a] =
    [a]
end

define (>=>) := list_bind end










