import
    List
end

# Maybe monad

defop >>= 10 left

define maybe_bind m f : Maybe a -> (a -> Maybe b) -> Maybe b =
    match m with
        case Nothing => Nothing
        case Just a => f a
    end
end

define maybe_return a : a -> Maybe a =
    Just a
end

define (>>=) := maybe_bind end

# List monad

defop >=> 10 left

define list_bind xs f : [a] -> (a -> [b]) -> [b] =
    match xs with
        case [] => []
        case [x | xs] => list_bind xs f |> append $ f x
    end
end

define list_return a : a -> [a] =
    [a]
end

define (>=>) := list_bind end


# Either monads

defop =>> 10 left

define either_bind e f : Either a b -> (b -> Either a c) -> Either a c =
    match e with
        case Left a => Left a
        case Right a => f a
    end
end

define either_return : a -> Either b a =
    Right
end 

