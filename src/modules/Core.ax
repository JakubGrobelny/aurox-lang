# Comparisons

defop <  6  none
defop >  6  none
defop <= 6  none
defop >= 6  none
defop == 5  none
defop != 5  none

define (<) l r : a -> a -> Bool =
    __cmp_less (l, r)
end

define (>) l r : a -> a -> Bool =
    __cmp_great (l, r)
end

define (==) l r : a -> a -> Bool =
    __cmp_eq (l, r)
end

define not a : Bool -> Bool =
    __not a
end

define (<=) l r : a -> a -> Bool =
    __cmp_less_eq (l, r)
end

define (>=) l r : a -> a -> Bool =
    __cmp_great_eq (l, r)
end

define (!=) l r : a -> a -> Bool =
    __cmp_neq (l, r)
end

type Ordering with
    case OrdL
    case OrdEq
    case OrdG
end

define compare a b : a -> a -> Ordering =
    if a < b
        then OrdL
        else if a == b
            then OrdEq
            else OrdG
        end
    end
end

# System

define exit u : Int -> Unit =
    __exit u
end

# Tuples 

define first t : (a, b) -> a =
    match t with
        case a, _ => a
    end
end

define second t : (a, b) -> b =
    match t with
        case _, b => b
    end
end

# Casts

define char_code c : Char -> Int =
    __char_code c
end

define float_of_int n : Int -> Float =
    __int_to_float n
end

define int_of_float x : Float -> Int =
    __float_to_int x
end

define show v : a -> String =
    __show v
end

# Typedefs

type Maybe a with
    case Nothing
    case Just a
end

type Either a b with
    case Left a
    case Right b
end

# Maybe monad

defop >>= 10 left

define maybe_bind m f : Maybe a -> (a -> Maybe b) -> Maybe b =
    match m with
        case Nothing => Nothing
        case Just a => f a
    end
end

define maybe_return a : a -> Maybe a =
    Just a
end

define (>>=) := maybe_bind end

define unwrap_or m def : Maybe a -> a -> a =
    match m with
        case Nothing => def
        case Just a => a
    end
end

# Either monad

defop =>> 10 left

define either_bind e f : Either a b -> (b -> Either a c) -> Either a c =
    match e with
        case Left a => Left a
        case Right a => f a
    end
end

define either_return : a -> Either b a =
    Right
end 

define (=>>) := either_bind end

# Integer arithmetic

defop -  10 left
defop +  10 left
defop *  12 left
defop /  12 left
defop ^  15 right
defop -  18 prefix
defop %  12 left

define (+) a b : Int -> Int -> Int =
    __add (a, b)
end

define (-) a b : Int -> Int -> Int =
    __sub (a, b)
end

define (*) a b : Int -> Int -> Int =
    __mult (a, b)
end

define (/) a b : Int -> Int -> Maybe Int =
    __div (a, b)
end

define (^) a b : Int -> Int -> Int =
    __pow (a, b)
end

define (-) a : Int -> Int =
    __neg a
end

define (%) a b : Int -> Int -> Maybe Int =
    __mod (a,b)
end

# Float arithmetic

defop +. 10 left
defop -. 10 left
defop *. 12 left
defop /. 12 left
defop ^. 15 left
defop -. 18 prefix

define (+.) a b : Float -> Float -> Float =
    __addf (a, b)
end

define (-.) a b : Float -> Float -> Float =
    __subf (a, b)
end

define (*.) a b : Float -> Float -> Float =
    __multf (a, b)
end

define (/.) a b : Float -> Float -> Maybe Float =
    if b == 0.0
        then Nothing
        else Just (__divf (a, b))
    end
end

define (^.) a b : Float -> Float -> Float =
    __powf (a, b)
end

define (-.) a : Float -> Float =
    __negf a
end

# Functional

defop .  20 right
defop $  0  right
defop |> 0  left

define flip f x y : (a -> b -> c) -> b -> a -> c =
    f y x
end

define ($) f x : (a -> b) -> a -> b =
    f x
end

define (.) f g x : (b -> c) -> (a -> b) -> a -> c =
    f (g x)
end

define (|>) x f : a -> (a -> b) -> b =
    f x
end

define fix f x : ((a -> b) -> a -> b) -> a -> b =
    f (fix f) x
end

define absurd x : Void -> a =
    match x with end
end

define id a : a -> a =
    a
end 

define const a b : a -> b -> a =
    a
end

define seq a b : a -> b -> b =
    b
end

define until p f a : (a -> Bool) -> (a -> a) -> a -> a =
    if not (p a)
        then until p f $ f a
        else a
    end
end

define unless p? : (a -> Bool) -> (a -> Bool) =
    not . p?
end